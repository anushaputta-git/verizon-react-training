
steps to create a react application without tool:
1. create a blank folder (react-app-without-tool)
2. create package.json file using command
>npm init --yes
3. download react packages:
>npm i react react-dom --save

4. download babel packages:
>npm i @babel/core @babel/cli @babel/preset-env @babel/preset-react --save-dev

5. download bundler packages:
>npm i webpack webpack-cli webpack-dev-server --save-dev

6. create your application folders
7. add files as necessary
	a. a file with rendering DOM (index.js)
	b. a file with root (container) component (App.js)
	c. other files organized into folders

8. create your application
9. configure bundler (webapck)
	a. create a file -- webpack.config.js (at root directory)

10. configure compiler (babel) [typescript - tsc compiler]
	a. add a file at thge root directory: .babelrc
	b. put plugin information with "presets" key

React Element Actual Scenario:

// <h1 id='mainHeader'><span>hello<span></h1>
/** var element = React.createElement(
 *                          'h1', { id: 'mainHeader', onClick='testFn' },
 *                           React.createElement('span',null,'hello'));
 *  */
var element = <h1><span>hello</span></h1>;
const testFn = () => console.log('hi');
var actualElement = {
    type: 'h1',
    props: {
        id: 'mainHeader',
        onClick: testFn,
        children: {
            type: 'span',
            props: {
                children: 'hello'
            }
        }
    }
}

// component: App
function App() {
    return element;
}

// function person() {
//     return {
//         name: '',
//         age: 0
//     }
// }

// Component instance: <App />

ReactDOM.render(<App />, document.getElementById('root'));

Set-ExecutionPolicy Unrestricted

components: functional component and class component

component: return an element
component instance: an instance of the component which will be called to return the element
element: design with data placed in it ti be rendered

React element NOT an HTML element

to create element:
vanilla javascript 
JSX JavaScript Extended => HTMLish look and feel
helps you to create a React element easily usinf syntax

const element = <h1>Hi</h1>;
function App(){
   return element;
}
class App extends React.Component{}

const app = new App();
ReactDOM.render(app)

ReactDOM.render(<App/>,....);


function Component(){
}

Component.prototype.<> = function(){}














